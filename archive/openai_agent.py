import openai
import json
import os
import logging
import datetime
from typing import Dict, Any, Optional

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("openai_agent.log", encoding='utf-8'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger("OpenAI_Agent")

class OpenAIAgent:
    def __init__(self):
        # OpenAI API kulcs bet√∂lt√©se f√°jlb√≥l
        try:
            with open('openai_key.txt', 'r') as f:
                api_key = f.read().strip()
                # Az √∫j API verzi√≥ k√∂rnyezeti v√°ltoz√≥k√©nt v√°rja a kulcsot
                os.environ["OPENAI_API_KEY"] = api_key
        except FileNotFoundError:
            raise Exception("OpenAI API kulcs f√°jl (openai_key.txt) nem tal√°lhat√≥!")
        except Exception as e:
            raise Exception(f"Hiba az OpenAI API kulcs bet√∂lt√©sekor: {str(e)}")

    def analyze_and_execute(self, log_text: str, send_command_callback) -> None:
        """
        Elemzi a log sz√∂veget √©s v√©grehajtja a javasolt parancsot, ha van.
        
        Args:
            log_text (str): A log sz√∂veg amit elemezni kell
            send_command_callback (callable): F√ºggv√©ny a parancs v√©grehajt√°s√°hoz
            
        Returns:
            None
        """
        try:
            # Log elemz√©se a megl√©v≈ë funkci√≥val
            analysis_result = self.analyze_server_status(log_text)
            
            # Javaslatok feldolgoz√°sa
            for recommendation in analysis_result.get("recommendations", []):
                # Parancs form√°tum ellen≈ërz√©se
                if recommendation.startswith("CMD:") or recommendation.startswith("REPLAY:"):
                    # Parancs v√©grehajt√°sa a callback seg√≠ts√©g√©vel
                    send_command_callback(recommendation)
                    # Csak az els≈ë v√©grehajthat√≥ parancsot k√ºldj√ºk el
                    break
                    
        except Exception as e:
            logger.error(f"Hiba az analyze_and_execute sor√°n: {str(e)}")
    
    def analyze_server_status(self, log_text: str) -> Dict[str, Any]:
        """
        Szerver √°llapot logok elemz√©se OpenAI GPT-4 seg√≠ts√©g√©vel.
        
        Args:
            log_text (str): A szerver log sz√∂vege
            
        Returns:
            Dict[str, Any]: Az elemz√©s eredm√©nye, amely tartalmazza:
                - responding_servers: Lista a megfelel≈ëen v√°laszol√≥ szerverekr≈ël
                - failing_servers: Lista a hib√°s szerverekr≈ël
                - recommendations: Javaslatok list√°ja a probl√©m√°k megold√°s√°ra
                - severity: A probl√©ma s√∫lyoss√°ga (low/medium/high/critical)
        """
        try:
            # Prompt √∂ssze√°ll√≠t√°sa a GPT-4 sz√°m√°ra
            prompt = f"""Elemezd a k√∂vetkez≈ë szerver log bejegyz√©seket √©s add vissza JSON form√°tumban:
            - Mely szerverek v√°laszolnak megfelel≈ëen
            - Mely szerverek nem v√°laszolnak vagy hib√°sak
            - Mit kellene tenni a probl√©m√°k megold√°s√°ra (haszn√°lj CMD: vagy REPLAY: prefixet ha konkr√©t parancsot javasolsz)
            - Milyen s√∫lyos a probl√©ma (low/medium/high/critical)

            P√©ld√°k a javaslatokra:
            - "CMD: systemctl restart nginx" - szerver √∫jraind√≠t√°s
            - "CMD: ping server1" - kapcsolat tesztel√©se
            - "REPLAY:1" - el≈ëz≈ë parancs megism√©tl√©se
            - "N√∂veld a timeout √©rt√©ket a konfigur√°ci√≥ban" - √°ltal√°nos javaslat

            Log:
            {log_text}

            V√°laszolj kiz√°r√≥lag JSON form√°tumban, a k√∂vetkez≈ë strukt√∫r√°ban:
            {{
                "responding_servers": ["server1", "server2"],
                "failing_servers": ["server3"],
                "recommendations": ["CMD: restart service", "Check configuration"],
                "severity": "low/medium/high/critical"
            }}
            """

            # GPT-4 API h√≠v√°s az √∫j API verzi√≥val
            client = openai.OpenAI()
            response = client.chat.completions.create(
                model="gpt-4",
                messages=[
                    {"role": "system", "content": "Te egy szerver log elemz≈ë AI asszisztens vagy. "
                                                "A feladatod a szerverek √°llapot√°nak √©s probl√©m√°inak elemz√©se."},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.2
            )

            # JSON v√°lasz feldolgoz√°sa
            try:
                result = json.loads(response.choices[0].message.content)
                return result
            except json.JSONDecodeError:
                raise Exception("Hiba: Az AI v√°lasza nem valid JSON form√°tum!")

        except Exception as e:
            raise Exception(f"OpenAI API hiba: {str(e)}")

    def format_analysis_result(self, result: Dict[str, Any]) -> str:
        """
        Az elemz√©s eredm√©ny√©nek form√°z√°sa olvashat√≥ sz√∂vegg√©.
        
        Args:
            result (Dict[str, Any]): Az analyze_server_status √°ltal visszaadott elemz√©s
            
        Returns:
            str: Form√°zott sz√∂veg az eredm√©nyekkel
        """
        output = []
        output.append("üîç Szerver St√°tusz Elemz√©s")
        output.append("=" * 30)
        
        output.append("\n‚úÖ Megfelel≈ëen v√°laszol√≥ szerverek:")
        for server in result.get("responding_servers", []):
            output.append(f"  - {server}")
            
        output.append("\n‚ùå Probl√©m√°s szerverek:")
        for server in result.get("failing_servers", []):
            output.append(f"  - {server}")
            
        output.append("\nüí° Javaslatok:")
        for rec in result.get("recommendations", []):
            output.append(f"  - {rec}")
            
        severity_map = {
            "low": "‚ö™ Alacsony",
            "medium": "üü° K√∂zepes",
            "high": "üü† Magas",
            "critical": "üî¥ Kritikus"
        }
        
        output.append(f"\n‚ö†Ô∏è Probl√©ma s√∫lyoss√°ga: {severity_map.get(result.get('severity', 'unknown'), '‚ùì Ismeretlen')}")
        
        return "\n".join(output)

    def edit_code_file(self, filepath: str, instruction: str) -> str:
        """
        Beolvas egy Python f√°jlt, GPT-4 seg√≠ts√©g√©vel m√≥dos√≠tja az instrukci√≥ alapj√°n,
        majd elmenti az eredm√©nyt _ai.py kiterjeszt√©ssel.
        
        Args:
            filepath (str): A m√≥dos√≠tand√≥ Python f√°jl el√©r√©si √∫tja
            instruction (str): Az instrukci√≥ a k√≥d m√≥dos√≠t√°s√°ra
            
        Returns:
            str: Az √∫j f√°jl el√©r√©si √∫tja
        """
        try:
            # F√°jl beolvas√°sa
            with open(filepath, 'r', encoding='utf-8') as f:
                file_content = f.read()
            
            # √öj f√°jln√©v gener√°l√°sa
            directory, filename = os.path.split(filepath)
            filename_without_ext, _ = os.path.splitext(filename)
            new_filepath = os.path.join(directory, f"{filename_without_ext}_ai.py")
            
            # Prompt √∂ssze√°ll√≠t√°sa a GPT-4 sz√°m√°ra
            prompt = f"""Ez egy Python f√°jl tartalma. K√©rlek v√©gezd el a k√∂vetkez≈ë m√≥dos√≠t√°st: {instruction}. Add vissza az √∫j k√≥dot Python f√°jl form√°j√°ban, kommentek n√©lk√ºl.

            Python f√°jl tartalma:
            ```python
            {file_content}
            ```
            """

            # GPT-4 API h√≠v√°s
            client = openai.OpenAI()
            response = client.chat.completions.create(
                model="gpt-4",
                messages=[
                    {"role": "system", "content": "Te egy Python k√≥dfejleszt≈ë AI asszisztens vagy. "
                                                 "A feladatod a kapott Python k√≥d m√≥dos√≠t√°sa a megadott instrukci√≥k alapj√°n."},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.2
            )
            
            # Csak a k√≥dot ments√ºk el, a magyar√°zat n√©lk√ºl
            ai_response = response.choices[0].message.content
            
            # K√≥d kinyer√©se a v√°laszb√≥l (ha code blockban van)
            code_content = ai_response
            if "```python" in ai_response and "```" in ai_response:
                # K√≥d kinyer√©se a python code block-b√≥l
                code_blocks = ai_response.split("```")
                for i, block in enumerate(code_blocks):
                    if block.strip().startswith("python") or (i > 0 and code_blocks[i-1].strip().endswith("python")):
                        code_content = block.replace("python", "").strip()
                        break
            
            # √öj f√°jl ment√©se
            with open(new_filepath, 'w', encoding='utf-8') as f:
                f.write(code_content)
            
            # Esem√©ny napl√≥z√°sa az openai_agent.log f√°jlba (m√°r konfigur√°lva van)
            logger.info(f"K√≥d m√≥dos√≠t√°s v√©grehajtva: {filepath} -> {new_filepath} | Instrukci√≥: {instruction}")
            
            # Esem√©ny napl√≥z√°sa a copilot_journal.md f√°jlba
            timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            journal_entry = f"""
## {timestamp} - K√≥d M√≥dos√≠t√°s

- **Eredeti f√°jl:** `{filepath}`
- **√öj f√°jl:** `{new_filepath}`
- **Instrukci√≥:** {instruction}
- **St√°tusz:** ‚úÖ Sikeres
            """
            
            # L√©trehozzuk vagy hozz√°f≈±zz√ºk a journal f√°jlt
            with open("copilot_journal.md", "a", encoding='utf-8') as f:
                f.write(journal_entry)
            
            return new_filepath
            
        except Exception as e:
            error_msg = f"Hiba a k√≥d m√≥dos√≠t√°sa sor√°n: {str(e)}"
            logger.error(error_msg)
            
            # Hiba napl√≥z√°sa a copilot_journal.md f√°jlba
            timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            journal_entry = f"""
## {timestamp} - K√≥d M√≥dos√≠t√°s

- **Eredeti f√°jl:** `{filepath}`
- **Instrukci√≥:** {instruction}
- **St√°tusz:** ‚ùå Sikertelen
- **Hiba:** {str(e)}
            """
            
            # L√©trehozzuk vagy hozz√°f≈±zz√ºk a journal f√°jlt
            with open("copilot_journal.md", "a", encoding='utf-8') as f:
                f.write(journal_entry)
            
            raise Exception(error_msg)

if __name__ == "__main__":
    # P√©lda haszn√°lat
    agent = OpenAIAgent()
    
    test_log = """
    [2025-04-13 10:15:23] Server app1.example.com - Ping response time: 1.5ms
    [2025-04-13 10:15:24] Server db1.example.com - Connection timeout after 30s
    [2025-04-13 10:15:25] Server app2.example.com - SSH connection refused
    [2025-04-13 10:15:26] Server cache1.example.com - Response: 200 OK
    """
    
    try:
        result = agent.analyze_server_status(test_log)
        print(agent.format_analysis_result(result))
    except Exception as e:
        print(f"Hiba: {str(e)}")